library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity Voice_recognition is
    Generic (
        CLK_FREQ   : integer := 100e6;   -- set system clock frequency in Hz
        BAUD_RATE  : integer := 9600; -- baud rate value
        PARITY_BIT : string  := "none");  -- legal values: "none", "even", "odd", "mark", "space"
    Port (
        CLK        : in  std_logic; -- system clock
        RST_N      : in  std_logic; -- low active synchronous reset
        
        -- UART INTERFACE
        UART_TXD   : out std_logic; -- TX
        UART_RXD   : in  std_logic; -- RX
        
        -- DEBUG INTERFACE
        BUSY       : out std_logic; -- RTS
        FRAME_ERR  : out std_logic; -- CTS
        
		  -- FSM States
		  state_one : out  std_logic := '0'; -- led
		  state_two : out std_logic := '0'; -- led
		  state_three : out std_logic := '0'; --led
		  state_four : out std_logic := '0'; -- led
		  
		  -- Data Display Interface 
		  data_led : out std_logic_vector(7 downto 0); -- led
		  
		  -- Writes "NO =" using 7 segments
		  disp : out std_logic_vector (6 downto 0);
		  AN : out std_logic_vector(7 downto 0) 		  
);
end Voice_recognition;


		---------------------------- Top Level Architecture -----------------------------
		--                                                                             --
		--  Consists of :                                                              --
		--   * It has one process reacts to (clk, data change, reset button)           --
		--   * Arrays of trained signals  for digits                                   --
		--   * FSM with 4 states 						       -- 										    --
		--         (receiving , distance calculation, decision, display)               --
		--                                                                             --
		---------------------------------------------------------------------------------
		
		
architecture FULL of Voice_recognition is

	 --------------------------------- Arrays ------------------------------------
    	type storage is array (999 downto 0) of integer;
    	type state_type IS (A, B, C, D);
	 
	 --------------------------------- Signals ------------------------------------
    	signal reset : std_logic;
    	signal state : state_type;   	
    	signal received : storage;
    	signal valid   : std_logic;
    	constant number_one : storage := (10,12,11,10,10,10,13,14,12,11,13,13,13,12,10,11,11,11,11,10,9,9,9,8,7,7,7,7,7,5,5,5,4,4,4,5,5,7,6,5,6,6,7,5,4,5,5,4,5,5,4,4,5,
		4,3,3,3,3,3,3,3,3,3,2,3,3,3,2,3,3,2,2,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,3,2,3,3,3,3,3,3,3,4,4,5,5,6,6,7,8,9,11,12,14,14,15,17,18,19,23,24,25,28,30,29,31,34,34,35,37,35,32,37,43,41,33,37,46,
		49,42,35,41,52,56,50,47,50,55,60,61,55,46,47,57,69,73,77,82,81,73,62,49,48,47,43,37,27,17,19,25,30,32,31,30,27,25,22,20,18,16,14,
		12,9,7,6,7,7,7,7,6,5,5,5,5,4,3,3,4,5,5,5,4,4,4,3,4,3,3,4,3,4,3,4,4,3,3,2,3,3,4,4,3,3,3,3,4,4,4,3,3,3,3,4,4,4,4,3,4,4,4,5,5,4,4,5,
		5,5,6,7,7,7,7,8,9,9,9,10,11,11,11,12,14,15,16,16,16,17,17,19,20,21,22,22,22,23,25,26,26,26,26,25,25,26,27,27,27,28,28,26,26,26,25,
		25,25,25,25,26,28,30,32,31,30,30,30,30,30,30,30,31,31,31,30,30,30,31,32,33,34,33,30,29,31,34,36,37,36,36,35,34,33,35,37,38,40,40,40,
		39,36,34,33,33,35,35,36,36,36,34,31,29,27,27,26,25,22,19,16,17,17,16,14,11,9,10,11,12,11,10,9,9,10,11,12,13,14,15,16,16,15,14,11,10,8,
		7,7,9,10,10,11,11,12,12,13,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,11,12,12,13,13,13,13,13,14,14,15,15,16,16,16,16,17,17,18,
		19,20,21,22,24,24,25,26,26,26,26,27,27,27,27,27,27,27,28,28,29,29,30,30,31,32,33,34,35,35,36,36,37,37,38,38,39,40,41,42,43,44,44,45,
		44,44,44,44,44,44,44,44,43,41,40,38,35,33,31,29,28,26,25,25,25,26,27,29,30,32,34,36,38,40,41,40,39,38,37,38,38,38,39,40,41,42,42,42,41,
		40,38,36,34,33,31,30,29,29,28,27,26,26,26,26,25,24,24,23,22,22,22,21,21,20,19,18,19,20,20,20,19,18,17,16,16,16,15,13,12,11,11,12,14,15,16,
		16,17,18,19,21,23,25,26,27,27,28,28,28,27,26,26,25,24,23,23,22,22,22,22,22,21,21,20,20,21,20,20,20,20,19,18,18,18,19,20,20,21,22,23,24,25,
		26,27,28,28,29,30,32,33,33,32,32,32,33,35,36,37,37,38,38,39,40,41,41,41,40,40,40,41,42,43,43,44,45,46,48,49,49,49,50,51,51,52,52,52,52,53,
		53,53,54,54,53,51,50,48,46,46,45,45,45,46,47,48,48,49,50,50,51,52,52,52,51,51,50,50,49,48,46,45,44,43,42,40,38,37,35,35,35,35,34,34,33,33,
		31,30,28,27,25,24,24,24,24,24,22,20,18,16,15,15,16,16,16,16,15,14,13,12,13,14,15,15,16,16,15,14,13,12,12,12,12,13,13,13,13,13,13,13,14,14,
		14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,17,18,19,20,20,21,20,20,19,19,19,19,19,19,19,19,19,18,18,18,18,18,17,17,17,16,16,16,15,
		16,16,17,18,18,18,18,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,19,19,20,20,20,20,18,18,17,16,15,15,16,16,
		16,16,16,16,16,15,15,15,15,15,15,15,15,14,14,14,14,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,19,19,19,18,16,16,16,16,
		16,17,18,19,19,19,18,16,15,14,13,13,15,16,18,19,19,19,18,18,17,17,17,17,18,18,19,19,19,18,18,18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,
		20,21,21,21,21,20,20,20,20,21,21,21,21,22,22,23,23,23,22,22,22,22,22,22,22,22,23,23,24,24,24,25,25,24,25,25,24,24,24,24,23);

    --   constant number_bia : storage := (18,35,42,32,70,101,66,81,41,50,42,52,48,58,86,90,71,51,48,45,53,74,84,79,88,70,58,60,54,86,102,54,56,49,54,106,156,
--157,121,83,156,127,127,152,107,69,58,50,50,54,54,52,35,36,32,33,50,94,69,37,36,43,41,40,54,46,41,48,76,81,44,49,51,
--47,56,44,49,58,52,41,52,48,54,52,41,43,53,50,50,255,255,255,57,49,37,42,42,37,40,36,29,34,34,41,37,47,46,38,44,52,
--59,62,66,52,56,53,40,55,56,51,82,68,47,61,49,47,47,42,42,37,50,45,49,60,62,67,61,45,58,54,50,42,39,50,60,45,42,52,
--54,51,50,73,72,67,74,68,65,63,68,73,90,118,123,143,149,171,173,167,177,186,186,194,184,184,180,153,167,180,181,181,
--162,182,177,185,158,142,135,147,157,176,169,164,178,182,177,184,188,196,159,170,210,206,193,211,213,208,194,173,153,
--152,145,143,131,123,108,103,100,86,76,81,82,64,83,77,57,68,51,76,57,44,50,58,51,59,89,74,53,42,38,43,46,39,43,47,46,
--42,39,49,56,43,43,37,41,9,35,41,44,38,39,32,32,30,23,20,29,30,34,27,34,32,32,30,26,38,29,31,37,37,36,31,35,35,35,37,
--42,31,30,27,30,29,21,18,22,25,24,21,20,18,19,19,19,19,18,18,15,16,17,22,21,19,21,30,30,41,43,52,47,42,47,46,53,63,64,
--67,73,88,98,98,94,108,116,112,128,128,128,133,142,147,150,152,156,153,154,157,168,170,161,167,174,166,171,177,177,182,
--187,182,185,191,189,191,190,187,190,188,194,196,195,199,189,198,191,200,198,196,207,196,200,211,203,201,204,197,215,
--192,207,196,203,204,198,206,194,209,198,210,200,203,206,199,210,204,204,203,203,181,197,179,183,186,179,177,167,177,153,
--146,146,131,129,120,129,124,128,126,119,98,97,95,84,81,74,79,59,68,57,48,87,72,45,60,70,70,61,57,65,57,70,58,48,40,44,
--38,41,32,28,28,31,34,36,33,47,50,46,56,54,46,39,41,49,41,41,57,53,42,45,54,42,56,50,33,45,58,44,46,68,67,73,84,68,82,
--92,93,101,89,73,76,81,103,111,129,124,128,130,131,135,143,154,154,160,158,156,159,159,168,169,177,176,171,175,169,187,
--182,172,178,177,168,167,171,173,171,167,166,165,164,154,163,164,153,149,149,152,151,150,142,128,125,120,107,96,89,81,
--82,84,75,78,81,82,85,80,73,66,59,54,52,47,48,38,33,36,48,45,40,46,51,37,23,20,21,18,21,34,35,32,34,27,23,23,28,30,31,
--31,28,35,31,28,29,29,31,33,26,22,23,20,22,24,25,24,26,21,24,23,22,21,22,22,19,23,33,24,13,20,22,20,19,15,18,20,23,21,16,
--18,19,17,23,20,15,15,17,20,16,11,15,22,20,20,14,15,18,14,18,19,25,29,25,27,29,32,34,34,31,33,34,32,35,37,32,32,34,37,
--40,44,42,45,39,37,37,44,37,39,38,33,35,32,35,30,26,29,33,31,28,32,31,34,30,30,33,36,35,35,30,23,22,12,16,21,27,27,26,
--28,26,27,25,21,17,19,13,17,21,22,20,16,19,20,20,22,24,22,18,21,22,22,15,13,14,17,15,18,16,14,14,12,11,14,16,12,11,10,
--14,15,14,12,13,11,11,16,13,14,15,11,13,14,23,24,12,10,9,10,9,12,11,11,10,13,11,10,9,12,14,14,14,10,9,11,12,10,13,8,9,
--10,11,12,10,14,17,15,15,15,17,18,19,14,14,16,20,20,19,16,12,13,16,18,19,18,19,20,18,19,15,13,15,16,14,13,11,14,17,15,
--15,14,13,14,17,15,15,16,16,14,18,13,11,15,16,16,14,14,11,14,17,19,20,20,19,17,17,16,14,15,18,21,18,21,20,19,20,21,14,
--13,15,16,15,15,13,13,15,14,14,16,14,11,9,11,12,14,17,13,11,11,11,9,12,15,17,15,13,14,14,18,16,19,15,11,12,16,21,21,17,
--22,16,15,14,9,15,19,12,16,16,20,19,17,15,12,18,20,18,15,16,13,13,13,17,16,14,15,19,16,14,18,20,21,22,21,16,19,20,23,
--17,16,17,18,21,18,19,18,18,19,20,21,20,20,19,20,20,19,18,19,19,20,23,23,24,24,22,21,21,20,22,20,17,14,20,19,18,16,17,
--18,20,19,19,22,17,19,20,19,19,20,23,18,21,24,20,18,16);
		
	 constant number_bia : storage := (0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,
    	1,1,1,1,0,1,0,2,2,1,5,3,2,1,1,1,1,0,2,2,1,7,7,4,5,5,2,5,7,2,3,4,2,3,3,4,1,3,2,6,2,5,4,3,5,2,2,2,2,2,2,4,3,3,4,5,4,3,2,2,3,2,5,6,8,8,7,10,8,
    	10,5,3,3,3,3,2,3,1,5,3,0,1,1,1,3,3,1,2,1,2,4,5,6,4,6,7,5,3,0,2,8,8,2,3,7,6,3,4,5,2,2,3,3,4,4,2,2,7,18,31,44,64,86,99,106,116,116,112,113,94,
    	51,22,21,42,74,76,57,32,43,66,79,85,74,29,34,74,87,109,103,55,17,81,137,191,240,255,255,255,211,155,140,137,121,103,89,47,39,51,59,55,51,41,
    	18,19,12,8,8,8,7,9,11,11,14,13,16,18,19,14,15,16,20,13,19,7,5,8,11,9,3,3,2,1,6,5,6,7,2,7,12,7,5,8,15,11,5,9,10,8,5,4,5,4,1,1,1,2,1,1,4,6,3,3,
    	4,3,3,1,4,4,3,5,5,2,5,5,5,4,5,2,2,1,1,1,1,3,1,2,1,3,2,2,0,2,1,3,2,1,1,2,1,2,2,0,2,1,0,2,2,2,3,3,3,3,4,3,3,4,3,8,11,10,13,17,19,20,20,24,27,28,
    	31,36,41,47,53,54,52,51,45,43,46,45,45,45,51,61,61,49,35,36,39,37,33,34,38,45,48,47,51,55,52,50,54,60,70,71,70,75,75,87,95,89,95,77,58,40,36,
    	47,60,74,83,74,61,50,50,71,95,103,104,100,92,92,115,140,161,193,164,144,148,136,114,99,103,66,40,43,43,53,57,48,34,29,24,16,20,23,25,17,7,7,9,
    	9,9,7,7,3,4,6,7,6,3,2,2,1,1,2,2,0,0,2,4,3,2,1,2,2,2,2,2,1,3,2,2,2,5,6,3,1,2,3,2,1,1,2,2,3,3,1,2,4,4,1,2,3,3,3,2,4,4,1,1,1,2,1,2,4,5,4,4,3,5,6,
    	5,5,5,6,8,9,12,12,11,15,20,25,28,31,33,38,48,58,61,63,62,66,77,83,79,72,68,61,55,48,43,42,38,34,35,36,37,34,29,26,26,27,26,27,26,24,22,26,32,28,
    	21,16,17,17,13,12,10,9,10,11,12,11,9,9,10,12,16,16,11,7,6,6,9,11,12,12,10,10,10,8,7,6,3,4,7,10,13,12,7,5,5,6,9,8,7,7,7,7,7,6,6,5,3,1,3,4,5,3,2,2,
    	3,6,8,10,7,5,10,11,9,7,5,4,2,4,4,4,4,3,2,4,3,1,2,1,2,1,1,1,1,1,1,1,2,2,1,1,0,1,2,1,1,1,2,2,1,1,1,1,0,1,1,1,1,1,2,2,2,2,2,2,2,2,3,4,2,1,0,1,2,2,4,
    	6,7,8,9,11,13,15,17,16,13,12,12,13,11,11,12,12,11,11,12,11,8,5,2,3,5,7,8,8,8,8,7,6,6,6,7,7,5,2,4,6,5,5,5,5,6,5,4,3,5,7,8,8,8,6,5,4,6,5,4,5,6,6,5,
    	4,3,3,4,5,5,5,6,6,4,1,3,5,6,5,4,4,4,3,3,4,4,4,4,3,3,1,1,2,3,4,5,5,4,2,2,3,3,2,1,2,2,2,2,3,3,3,3,2,2,1,2,2,2,3,3,3,3,2,1,2,2,2,2,2,3,2,2,3,3,2,1,1,
    	3,4,4,3,2,3,4,3,3,3,2,2,3,2,3,4,3,1,2,3,2,1,0,1,1,1,0,1,1,1,1,1,0,1,2,3,2,2,3,3,3,3,3,4,5,6,7,8,8,9,9,9,8,8,9,9,9,8,7,5,3,1,1,3,4,5,6,5,5,5,4,4,3,
    	2,1,1,1,2,2,2,3,3,2,2,2,2,2,1,2,2,3,2,2,2,1,1,1,2,2,2,2,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,2,1,1,0,1,2,2,2,1,1,0,0,1,2,2,1,1,0,0,0,
    	1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0);
                        
    	signal data    : std_logic_vector(7 downto 0);    	
    	signal result : std_logic_vector(6 downto 0);

	 ------------------------- Black Magic Starts Here ------------------------------
	 
	 ---------------------- Instancia display ---------------------------------------
	 component display is
        port (
            disp : out STD_LOGIC_VECTOR (6 downto 0);
            anodo : out STD_LOGIC_VECTOR (7 downto 0);
            clk : in STD_LOGIC;
            reset_n : in STD_LOGIC;
            result : in STD_LOGIC_VECTOR(6 downto 0)
            );
     end component;

	 begin
	 
		reset <= RST_N;			
		--------------------------------- Component Mapping ------------------------------------
		uart_i: entity work.UART
			 generic map (
				  CLK_FREQ    => CLK_FREQ,
				  BAUD_RATE   => BAUD_RATE,
				  PARITY_BIT  => PARITY_BIT)
			 port map (
				  CLK         => CLK,
				  RST         => reset,
				  -- UART INTERFACE
				  UART_TXD    => UART_TXD,
				  UART_RXD    => UART_RXD,
				  -- USER DATA OUTPUT INTERFACE
				  DATA_OUT    => data,
				  DATA_VLD    => valid,
				  FRAME_ERROR => FRAME_ERR,
				  -- USER DATA INPUT INTERFACE
				  DATA_IN     => data,
				  DATA_SEND   => valid,
				  BUSY        => BUSY);
		
		
		---------------------------- Voice Recognition Proeces ----------------------------------
		voice_recognition: process (CLK,data,reset)
		
		variable index : integer := 0;
        variable min_number : integer := 2;
		variable i, j , m, k: integer;

		BEGIN
		
				--------------------------------------------
				--		FSM RESET                 --
				--------------------------------------------	
				If (reset = '1') THEN 

				 State <= A;
				 
				 state_one   <= '1';
				 state_two   <= '1';
				 state_three <= '1';
				 state_four  <= '1';
				 
		      	 i := 0;
				 j := 0;
				 m := 0;
				 k := 0;
				 
				 index := 0;
				 min_number := 2;
 				 data_led <= "00000000";
 				 result <= "1111111";

				 ELSIF rising_edge(CLK) THEN -- Nota: Clock igual 50 Mhz				 
				 CASE State IS
				  
					--------------------------------------------
					--		 State 1                  --
					--	  Data Receiving and storage       --
					--------------------------------------------
					WHEN A => 
						state_one <= '0';
						state_two <= '1';
						state_three <= '1';
						state_four <= '1';
						
						if (index < 1000) and valid = '1' then 
							received(index) <= to_integer(unsigned(data)); -- Receber dados do Matlab (Vector de 1000 bits)
							data_led <= data;
							index := index + 1;
						else if (index >= 1000) then
							state <= B;
							index := 0;
							end if;
						end if;
					--------------------------------------------
					--	          State 2                 --
					--	    Distance Calculation          --
					--------------------------------------------
					WHEN B => 
						 state_one <= '0';
						 state_two <= '0';
						 state_three <= '1';
						 state_four <= '1';
						 
						 if (i < 1000) then
						 
						 	 -- Number One --
							 if(received(i) = number_one(i)) then 
							 m := m+1;
							 end if; 
							 
							 -- Number Zero --
							 if (received(i) = number_bia(i)) then 
							 k := k+1;
							 end if; 
							
                        data_led <= std_logic_vector(to_unsigned(i,8));							 
							 i := i + 1;							 
 						 else  
						 data_led <= "00000000";
							state <= C;
							i := 0;
							
						 end if;
					--------------------------------------------
					--	        State 3                   --
					--	 Comparing with Numbers Arrays    --
					--------------------------------------------
					WHEN C => 
						state_one <= '0';
						state_two <= '0';
						state_three <= '0';
						state_four <= '1';			
						
						if(m < k) then  min_number := 0; 
        			    elsif (m > k) then min_number := 1;
        			    else min_number := 3;        											    						
					   	end if;
						
						
						state <= D;
						
					--------------------------------------------
					--		 State 4                  --
					--   Display Results On Seven Segments    --
					--------------------------------------------
					WHEN D=> 
						state_one <= '0';
						state_two <= '0';
						state_three <= '0';
						state_four <= '0';						
						
		                -------------------------------------------
						-- envia display
						  result <= "1111111" ;
						---------------------------------------------------
						if (min_number = 0) then
						-- Display Zero
					 	    result <= "1100000";
				     		data_led <= "01010101";
						end if;
						
						if (min_number = 1) then
						-- Display One
					        result <= "1111001" ;
						    data_led <= "10101010";
						end if;

						if (min_number /= 1 and min_number /= 0) then
						-- Display NOTHING
					       result <= "1111110" ;
						   data_led <= "11111111";
						end if;
						
						state_one <= '1';
					   	state_two <= '1';
					   	state_three <= '1';
					   	state_four <= '1';
						 
				    --------------------------------------------
					--  	      State Default               --
					--------------------------------------------
					WHEN others =>
						State <= A;						
				 END CASE;				 
			 END IF;			 	   
	END PROCESS;
	
	sendTo_display: component display
        port map(
            disp => disp,
            anodo => AN,
            clk => clk,
            reset_n => reset,
            result => result
        );
END FULL;
